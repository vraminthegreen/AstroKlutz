pygame.todo

- dust
- zoom out / zoom in manualny
- nebula się zoomuje powoli
- zoom automatyczny żeby zawierały się wszystkie statki
- move camery 
- move camery automatyczny żeby zawierały się wszystkie statki
- implementacja animacji odrzutu (osobnej)

+ algorytm drugiego statku - tryb 1 - poszukiwanie punktu za
+ klasa order zakładana przyciskiem myszy
+ autopilot mode
+ rakietka
+ animacja wybuchu
+ kolizja
+ klasa pocisk
+ strzelanie pociskiem
+ znikanie pocisku
+ posiadanie pocisku limit pocisków
+ drugi statek
+ is_in_field(dir-a,dir-b,min-dist,max-dist)
+ przełączanie między trybem 1 a drugim a drugim / stożki 45 stopni, 20 stopni
+ algorytm drugiego statku - tryb 2 - gonienie statku i strzelanie
+ zlecenie animacji + funkcji
+ przeróbka wybuchu na animację + funkcję
+ kolizje pocisków
+ dodać do kolizji zasięg
+ animacja końcowa pocisków przy trafieniu
+ RocketFrigateClass - obrazek
+ RocketFrigateClass - pilot - odpalanie rakiety

+ kolizja zniszczenie
+ przejść na animacje globalne (w game, słownik)
+ animacja tarczy
+ overlay animation
+ tarcza w zależności od kąta
+ wygenerowanie sprite midjourney
+ przygotowanie spritów
x podział sprite na podstawkę i barwy
x implementacja koloryzacji
+ przygotowanie kolorów spritów (skalowanie, obracanie)
+ Team
+ IconRepository
+ przygotowanie ładowania spritów i mechanizmu wybierania kolorów
+ nie działa kolor
+ nie działa pocisk
+ algorytm walki do klasy pilot
+ definicje statku do osobnej klasy, definicja FighterClass
+ dwa typy statków - swoje i wrogie
x przejść na multidziedziczenie z funkcjonalnością hit/dead
+ RocketFrigateClass - pilot - gdy odpalona rakieta
+ RocketFrigateClass - pilot - gdy nie odpalona rakieta
+ nebula
+ paralaksa nebuli / kilka warstw
+ przejście na współrzędne dookoła zera + camera_offset

